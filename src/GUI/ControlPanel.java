package GUI;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JPanel;

import src.SigSubTypes;

public class ControlPanel extends JPanel{
	
	
	private JButton jbaddUserID = new JButton("add userID");
	private JButton jbrevokePubKey = new JButton("revoke PubKey");
	private JButton jbaddUserAttr = new JButton("add user Attribute");
	private JButton jbaddSubKey = new JButton("add SubKey");
	private JButton jbrevokeSubKey = new JButton("revoke last SubKey");
	
	private Model model;
	private JPView view;
	
	ControlPanel(Container contentPane, JPView view, Model model){
		this.model = model;
		this.view = view;
		this.setBorder(BorderFactory.createLineBorder(Color.black));
		this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
		this.setBounds(0, 0, 100, contentPane.getHeight());
		this.setPreferredSize(new Dimension(180,contentPane.getHeight()));
		
		int maxWidth = jbrevokeSubKey.getWidth();
		jbaddUserID.setPreferredSize(new Dimension (maxWidth, jbaddUserID.getHeight()));
		jbrevokePubKey.setPreferredSize(new Dimension (maxWidth, jbrevokePubKey.getHeight()));
		jbaddUserAttr.setPreferredSize(new Dimension (maxWidth, jbaddUserAttr.getHeight()));
		jbaddSubKey.setPreferredSize(new Dimension (maxWidth, jbaddSubKey.getHeight()));
		
		
		/*this.add(jbaddUserID);
		this.add(jbrevokePubKey);
		this.add(jbaddUserAttr);
		this.add(jbaddSubKey);
		this.add(jbrevokeSubKey);*/
		
	}
}

class AddUserIDActionListener implements ActionListener{

	private Model model;
	private JPView view; 
	private SignaturePreference sigPref;
	
	AddUserIDActionListener(Model model, JPView jpView){
	this.model=model;
	this.view = jpView;
	}
	
public void createSigPref(){
		
		
		
		ArrayList<SubPacketMetaData> hashedSubPackets = new ArrayList<SubPacketMetaData>();
		ArrayList<SubPacketMetaData> UNhashedSubPackets = new ArrayList<SubPacketMetaData>();
		
		boolean insertPayload = true;
		boolean dontInsertPayload = false;
		boolean isUnhashedSubPacket = true;
		boolean isHashedSubPacket = false;
		
		//subpackets where a payload can be injected
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.PREFERRED_KEY_SERVER,isHashedSubPacket, insertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.REGULAR_EXPRESSION,isHashedSubPacket, insertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.SIGNERS_USER_ID,isHashedSubPacket, insertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.NOTATION_DATA,isHashedSubPacket, insertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.POLICY_URI,isHashedSubPacket, insertPayload));
		
		//these subpackets are generated by gpg at default
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.SIGNATURE_CREATION_TIME,isHashedSubPacket, dontInsertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.KEY_FLAGS,isHashedSubPacket, dontInsertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.KEY_EXPIRATION_TIME,isHashedSubPacket, dontInsertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.PREFERRED_COMPRESSION_ALGORITHMS,isHashedSubPacket, dontInsertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.PREFERRED_HASH_ALGORITHMS,isHashedSubPacket, dontInsertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.PREFERRED_SYMMETRIC_ALGORITHMS,isHashedSubPacket, dontInsertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.FEATURES,isHashedSubPacket, dontInsertPayload));
		hashedSubPackets.add(new SubPacketMetaData (SigSubTypes.KEY_SERVER_PREFERENCES,isHashedSubPacket, dontInsertPayload));
		
		
		UNhashedSubPackets.add(new SubPacketMetaData (SigSubTypes.ISSUER,isUnhashedSubPacket, dontInsertPayload));
		
		this.sigPref.setUNhashedSubPackets(UNhashedSubPackets);
		this.sigPref.setHashedSubPackets(hashedSubPackets);
	}
	@Override
	public void actionPerformed(ActionEvent arg0) {
		/*
		 * 1. update view, so that the user can choose whether to inject an payload
		 */
		
		model.addUserIdEntry();
		int lastentry = model.getNumOfLastEntry();
		model.addSignatureEntry2(sigPref, lastentry);
		view.updateView(model);
	}
	
}